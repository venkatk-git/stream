{
  "version": 3,
  "sources": ["../../../../../../../apps/api/src/middlewares/auth.middleware.ts"],
  "sourcesContent": ["import { redisClient } from '../redis';\r\n\r\nimport Users from '../models/user.model';\r\n\r\nimport { RequestHandler, Response, NextFunction } from 'express';\r\nimport { ExtendedRequest, ExtendedSocket } from '../lib/types';\r\nimport console from 'console';\r\n\r\nexport function isAuthenticated(): RequestHandler {\r\n  return (req: ExtendedRequest, res: Response, next: NextFunction) => {\r\n    if (!req.user || !req.isAuthenticated() || !req.session?.passport?.user) {\r\n      return next(new Error('Not authenticated'));\r\n    }\r\n\r\n    return next();\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware to authorize a user by verifying the presence of a user in the socket request.\r\n *\r\n * This middleware checks if a user session exists in the socket request. If no valid\r\n * user session is found, it passes an error to the next function in the middleware chain.\r\n * If a user is authorized, their details are added to the socket object, and\r\n * the user's socket ID is stored in Redis.\r\n *\r\n * @param socket - The connected socket instance, extended with session data.\r\n * @param next - Callback to pass control to the next middleware or function.\r\n */\r\nexport function authorizeUser(socket: ExtendedSocket, next: NextFunction) {\r\n  if (\r\n    !socket.request.session ||\r\n    !socket.request.session.passport ||\r\n    !socket.request.session.passport.user\r\n  ) {\r\n    return next(new Error('User not authorized'));\r\n  }\r\n\r\n  socket.user = { ...socket.request.session.user };\r\n  redisClient.hset(`userid:${socket.user.id}`, 'socketid', socket.id);\r\n  return next();\r\n}\r\n\r\n/**\r\n * Middleware to attach a user object to the Express request.\r\n *\r\n * This middleware retrieves the user details from the database using the user ID\r\n * stored in the session (`req.session.passport.user`). Once the user is\r\n * found, their details are added to `req.user`.\r\n *\r\n * If the user is not found in the database, it throws a 401 Unauthorized error,\r\n * preventing further execution of the request.\r\n *\r\n * @param req - The Express request object.\r\n * @param res - The Express response object.\r\n * @param next - The next middleware function in the request lifecycle.\r\n */\r\nexport async function attachUserToRequest(\r\n  req: ExtendedRequest,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    // Retrieve the user ID from the session\r\n    const userId = req.session?.passport?.user;\r\n\r\n    if (!userId) {\r\n      return res.status(401).json({\r\n        success: false,\r\n        error: { message: 'User is not authenticated' },\r\n      });\r\n    }\r\n\r\n    // Fetch the user from the database\r\n    const user = await Users.findById(userId);\r\n\r\n    if (!user) {\r\n      return res.status(401).json({\r\n        success: false,\r\n        error: { message: 'User not found' },\r\n      });\r\n    }\r\n\r\n    // Attach the user to the request object\r\n    req.user = {\r\n      id: user._id.toString(),\r\n      username: user.username,\r\n      googleId: user.googleId,\r\n      profileImg: user.profileImg,\r\n    };\r\n\r\n    next(); // Proceed to the next middleware or route handler\r\n  } catch (error) {\r\n    console.error('Error attaching user to request:', error);\r\n\r\n    res.status(500).json({\r\n      success: false,\r\n      error: { message: 'Internal Server Error' },\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA4B;AAE5B,kBAAkB;AAIlB,qBAAoB;AAEb,SAAS,kBAAkC;AAChD,SAAO,CAAC,KAAsB,KAAe,SAAuB;AAClE,QAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,gBAAgB,KAAK,CAAC,IAAI,SAAS,UAAU,MAAM;AACvE,aAAO,KAAK,IAAI,MAAM,mBAAmB,CAAC;AAAA,IAC5C;AAEA,WAAO,KAAK;AAAA,EACd;AACF;AAaO,SAAS,cAAc,QAAwB,MAAoB;AACxE,MACE,CAAC,OAAO,QAAQ,WAChB,CAAC,OAAO,QAAQ,QAAQ,YACxB,CAAC,OAAO,QAAQ,QAAQ,SAAS,MACjC;AACA,WAAO,KAAK,IAAI,MAAM,qBAAqB,CAAC;AAAA,EAC9C;AAEA,SAAO,OAAO,EAAE,GAAG,OAAO,QAAQ,QAAQ,KAAK;AAC/C,2BAAY,KAAK,UAAU,OAAO,KAAK,EAAE,IAAI,YAAY,OAAO,EAAE;AAClE,SAAO,KAAK;AACd;AAgBA,eAAsB,oBACpB,KACA,KACA,MACA;AACA,MAAI;AAEF,UAAM,SAAS,IAAI,SAAS,UAAU;AAEtC,QAAI,CAAC,QAAQ;AACX,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SAAS;AAAA,QACT,OAAO,EAAE,SAAS,4BAA4B;AAAA,MAChD,CAAC;AAAA,IACH;AAGA,UAAM,OAAO,MAAM,YAAAA,QAAM,SAAS,MAAM;AAExC,QAAI,CAAC,MAAM;AACT,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SAAS;AAAA,QACT,OAAO,EAAE,SAAS,iBAAiB;AAAA,MACrC,CAAC;AAAA,IACH;AAGA,QAAI,OAAO;AAAA,MACT,IAAI,KAAK,IAAI,SAAS;AAAA,MACtB,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,MACf,YAAY,KAAK;AAAA,IACnB;AAEA,SAAK;AAAA,EACP,SAAS,OAAO;AACd,mBAAAC,QAAQ,MAAM,oCAAoC,KAAK;AAEvD,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS;AAAA,MACT,OAAO,EAAE,SAAS,wBAAwB;AAAA,IAC5C,CAAC;AAAA,EACH;AACF;",
  "names": ["Users", "console"]
}
