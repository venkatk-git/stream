{
  "version": 3,
  "sources": ["../../../../../../../apps/api/src/middlewares/socket.middleware.ts"],
  "sourcesContent": ["import Users from '../models/user.model';\r\n\r\nimport { NextFunction } from 'express';\r\nimport { ExtendedSocket } from '../lib/types';\r\n\r\n/**\r\n * Middleware to attach a user object to the socket request.\r\n *\r\n * This middleware retrieves the user details from the database using the user ID\r\n * stored in the session (`socket.request.session.passport.user`). Once the user is\r\n * found, their details are added to `socket.request.user` with the fields:\r\n * `id`, `username`, and `googleId`.\r\n *\r\n * If the user is not found in the database, it throws an \"Unauthorized\" error,\r\n * preventing further execution of the socket connection.\r\n *\r\n * @param socket - The extended socket instance that includes session and user details.\r\n * @param next - The next middleware function in the socket lifecycle.\r\n */\r\n\r\nexport async function attachUserToSocket(\r\n  socket: ExtendedSocket,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const user = await Users.findById(socket.request.session.passport.user);\r\n\r\n    if (!user) {\r\n      next(new Error('Unauthorized from socket middleware'));\r\n      return;\r\n    }\r\n\r\n    socket.request.session.user = {\r\n      id: user._id.toString(),\r\n      username: user.username,\r\n      googleId: user.googleId,\r\n      profileImg: user.profileImg,\r\n    };\r\n\r\n    next();\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkB;AAoBlB,eAAsB,mBACpB,QACA,MACA;AACA,MAAI;AACF,UAAM,OAAO,MAAM,YAAAA,QAAM,SAAS,OAAO,QAAQ,QAAQ,SAAS,IAAI;AAEtE,QAAI,CAAC,MAAM;AACT,WAAK,IAAI,MAAM,qCAAqC,CAAC;AACrD;AAAA,IACF;AAEA,WAAO,QAAQ,QAAQ,OAAO;AAAA,MAC5B,IAAI,KAAK,IAAI,SAAS;AAAA,MACtB,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,MACf,YAAY,KAAK;AAAA,IACnB;AAEA,SAAK;AAAA,EACP,SAAS,OAAO;AACd,SAAK,KAAK;AAAA,EACZ;AACF;",
  "names": ["Users"]
}
