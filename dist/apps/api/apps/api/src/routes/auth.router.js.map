{
  "version": 3,
  "sources": ["../../../../../../../apps/api/src/routes/auth.router.ts"],
  "sourcesContent": ["import { Router } from 'express';\r\nimport passport from '../config/passport.config';\r\n\r\nimport Users from '../models/user.model';\r\n\r\nimport { ExtendedRequest } from '../lib/types';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * Initiates Google OAuth 2.0 authentication.\r\n *\r\n * This route redirects the user to Google's OAuth 2.0 authentication page.\r\n * The `scope` specifies the permissions being requested, including access\r\n * to the user's profile and email address.\r\n */\r\nrouter.get(\r\n  '/google',\r\n  passport.authenticate('google', {\r\n    scope: ['profile', 'email'],\r\n  })\r\n);\r\n\r\n/**\r\n * OAuth 2.0 callback route for Google authentication.\r\n *\r\n * This route handles the callback from Google's OAuth 2.0 flow. After successful\r\n * authentication, the user's details are retrieved from the database and attached\r\n * to both the request object (`req.user`) and the session (`req.session.user`).\r\n *\r\n *  The user is then redirected to the front-end application at\r\n * `http://localhost:4200/connectSocket`. If the user is not found, the request is\r\n * redirected back to the Google authentication initiation route (`/auth/google`).\r\n */\r\nrouter.get(\r\n  '/google/cb',\r\n  passport.authenticate('google', {\r\n    failureRedirect: '/auth/google',\r\n  }),\r\n  async (req: ExtendedRequest, res) => {\r\n    const user = await Users.findById(req.session.passport.user);\r\n\r\n    if (!user) {\r\n      console.error('User not found');\r\n      return res.status(404).redirect('/auth/google');\r\n    }\r\n\r\n    req.user = {\r\n      id: user._id.toString(),\r\n      username: user.username,\r\n      googleId: user.googleId,\r\n      profileImg: user.profileImg,\r\n    };\r\n\r\n    req.session.user = req.user;\r\n\r\n    // res.redirect('/protected');\r\n    res.redirect('http://localhost:4200/');\r\n  }\r\n);\r\n\r\nexport default router;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAuB;AACvB,sBAAqB;AAErB,kBAAkB;AAIlB,MAAM,aAAS,uBAAO;AAStB,OAAO;AAAA,EACL;AAAA,EACA,gBAAAA,QAAS,aAAa,UAAU;AAAA,IAC9B,OAAO,CAAC,WAAW,OAAO;AAAA,EAC5B,CAAC;AACH;AAaA,OAAO;AAAA,EACL;AAAA,EACA,gBAAAA,QAAS,aAAa,UAAU;AAAA,IAC9B,iBAAiB;AAAA,EACnB,CAAC;AAAA,EACD,OAAO,KAAsB,QAAQ;AACnC,UAAM,OAAO,MAAM,YAAAC,QAAM,SAAS,IAAI,QAAQ,SAAS,IAAI;AAE3D,QAAI,CAAC,MAAM;AACT,cAAQ,MAAM,gBAAgB;AAC9B,aAAO,IAAI,OAAO,GAAG,EAAE,SAAS,cAAc;AAAA,IAChD;AAEA,QAAI,OAAO;AAAA,MACT,IAAI,KAAK,IAAI,SAAS;AAAA,MACtB,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,MACf,YAAY,KAAK;AAAA,IACnB;AAEA,QAAI,QAAQ,OAAO,IAAI;AAGvB,QAAI,SAAS,wBAAwB;AAAA,EACvC;AACF;AAEA,IAAO,sBAAQ;",
  "names": ["passport", "Users"]
}
