{
  "version": 3,
  "sources": ["../../../../../../apps/api/src/app.ts"],
  "sourcesContent": ["import express from 'express';\r\nimport mongoose from 'mongoose';\r\nimport passport from 'passport';\r\n\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\n\r\nimport authRouter from './routes/auth.router';\r\nimport testRouter from './routes/test.router';\r\nimport roomRouter from './routes/room.router';\r\n\r\nimport { globalErrorHandler } from './controllers/error.controller';\r\n\r\nimport { sessionMiddleware } from './middlewares/session.middleware.';\r\nimport {\r\n  attachUserToRequest,\r\n  isAuthenticated,\r\n} from './middlewares/auth.middleware';\r\n\r\nimport AppError from './lib/utils/AppError';\r\n\r\nimport { ExtendedRequest } from './lib/types';\r\nimport { Response, NextFunction } from 'express';\r\nimport { successResponse } from './lib/utils/response.utils';\r\n\r\nconst app = express();\r\n\r\n// CORS\r\nconst allowedOrigins = ['http://localhost:4200']; // Add allowed origins here\r\n\r\napp.use(\r\n  cors({\r\n    origin: (origin, callback) => {\r\n      if (allowedOrigins.includes(origin) || !origin) {\r\n        callback(null, origin);\r\n      } else {\r\n        callback(new Error('Not allowed by CORS'));\r\n      }\r\n    },\r\n    credentials: true, // Allow cookies and credentials\r\n  })\r\n);\r\n\r\n// Connect to Mongodb\r\nmongoose\r\n  .connect(process.env.MONGODB_URI)\r\n  .then(() => {\r\n    console.log('DB CONNECTED');\r\n  })\r\n  .catch((e: Error) => {\r\n    console.error(e.message);\r\n  });\r\n\r\n/**\r\n * Adds security-related HTTP headers to the application using helmet.\r\n *\r\n * This middleware helps protect the application from common web vulnerabilities\r\n * by setting various HTTP headers, such as those for content security,\r\n * cross-site scripting (XSS) protection, and more...\r\n *\r\n * Purpose:\r\n * - Enhances the security of the application by setting various HTTP headers.\r\n */\r\napp.use(helmet());\r\n\r\napp.use(express.json());\r\n\r\n/**\r\n * Initializes session handling using express-session.\r\n *\r\n * This middleware manages the session data for incoming requests, integrating\r\n * with Passport.js to store user session information and maintain user state\r\n * across requests.\r\n *\r\n * Purpose:\r\n * - Manages session data for incoming requests, integrating with Passport.js\r\n */\r\napp.use(sessionMiddleware);\r\n\r\n// Passport Initialization\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\n// Authentication\r\napp.use('/auth', authRouter);\r\n\r\n/**\r\n * Middleware to attach the authenticated user to the request object.\r\n * This ensures that user details are available in `req.user` for all subsequent routes and middleware.\r\n *\r\n * Purpose:\r\n * - Attaches the authenticated user to the request object for easy access in subsequent middleware and routes.\r\n */\r\napp.use(attachUserToRequest);\r\n\r\napp.get('/reqAuth', isAuthenticated(), (req: ExtendedRequest, res) => {\r\n  const user = req.user;\r\n\r\n  res.status(200).json(successResponse(user));\r\n});\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('Home');\r\n});\r\n\r\napp.use('/', testRouter);\r\n\r\napp.use('/r', roomRouter);\r\n\r\napp.all('*', (req: ExtendedRequest, res: Response, next: NextFunction) => {\r\n  next(new AppError(`Can't find ${req.originalUrl} on this server!`, 404));\r\n});\r\n\r\n/**\r\n * Global Error Handling Middleware\r\n * Attached at the end of the middleware stack.\r\n *\r\n * Purpose:\r\n * - Ensures consistent error responses across the application.\r\n * - Handles both operational and unexpected errors.\r\n */\r\napp.use(globalErrorHandler);\r\n\r\nexport default app;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AACpB,sBAAqB;AACrB,sBAAqB;AAErB,kBAAiB;AACjB,oBAAmB;AAEnB,kBAAuB;AACvB,kBAAuB;AACvB,kBAAuB;AAEvB,mBAAmC;AAEnC,gCAAkC;AAClC,IAAAA,eAGO;AAEP,sBAAqB;AAIrB,sBAAgC;AAEhC,MAAM,UAAM,eAAAC,SAAQ;AAGpB,MAAM,iBAAiB,CAAC,uBAAuB;AAE/C,IAAI;AAAA,MACF,YAAAC,SAAK;AAAA,IACH,QAAQ,CAAC,QAAQ,aAAa;AAC5B,UAAI,eAAe,SAAS,MAAM,KAAK,CAAC,QAAQ;AAC9C,iBAAS,MAAM,MAAM;AAAA,MACvB,OAAO;AACL,iBAAS,IAAI,MAAM,qBAAqB,CAAC;AAAA,MAC3C;AAAA,IACF;AAAA,IACA,aAAa;AAAA;AAAA,EACf,CAAC;AACH;AAGA,gBAAAC,QACG,QAAQ,QAAQ,IAAI,WAAW,EAC/B,KAAK,MAAM;AACV,UAAQ,IAAI,cAAc;AAC5B,CAAC,EACA,MAAM,CAAC,MAAa;AACnB,UAAQ,MAAM,EAAE,OAAO;AACzB,CAAC;AAYH,IAAI,QAAI,cAAAC,SAAO,CAAC;AAEhB,IAAI,IAAI,eAAAH,QAAQ,KAAK,CAAC;AAYtB,IAAI,IAAI,2CAAiB;AAGzB,IAAI,IAAI,gBAAAI,QAAS,WAAW,CAAC;AAC7B,IAAI,IAAI,gBAAAA,QAAS,QAAQ,CAAC;AAG1B,IAAI,IAAI,SAAS,YAAAC,OAAU;AAS3B,IAAI,IAAI,gCAAmB;AAE3B,IAAI,IAAI,gBAAY,8BAAgB,GAAG,CAAC,KAAsB,QAAQ;AACpE,QAAM,OAAO,IAAI;AAEjB,MAAI,OAAO,GAAG,EAAE,SAAK,iCAAgB,IAAI,CAAC;AAC5C,CAAC;AAED,IAAI,IAAI,KAAK,CAAC,KAAK,QAAQ;AACzB,MAAI,KAAK,MAAM;AACjB,CAAC;AAED,IAAI,IAAI,KAAK,YAAAC,OAAU;AAEvB,IAAI,IAAI,MAAM,YAAAC,OAAU;AAExB,IAAI,IAAI,KAAK,CAAC,KAAsB,KAAe,SAAuB;AACxE,OAAK,IAAI,gBAAAC,QAAS,cAAc,IAAI,WAAW,oBAAoB,GAAG,CAAC;AACzE,CAAC;AAUD,IAAI,IAAI,+BAAkB;AAE1B,IAAO,cAAQ;",
  "names": ["import_auth", "express", "cors", "mongoose", "helmet", "passport", "authRouter", "testRouter", "roomRouter", "AppError"]
}
