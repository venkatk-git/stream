{
  "version": 3,
  "sources": ["../../../../../../apps/api/src/main.ts"],
  "sourcesContent": ["import http from 'http';\r\nimport { Server } from 'socket.io';\r\nimport helmet from 'helmet';\r\nimport dotenv from 'dotenv';\r\ndotenv.config({ path: '../.env.local' });\r\n\r\nimport { authorizeUser } from './middlewares/auth.middleware';\r\nimport { attachUserToSocket } from './middlewares/socket.middleware';\r\nimport { sessionMiddleware } from './middlewares/session.middleware.';\r\n\r\nimport { joinHandler, membersList } from './socket/handlers/room.handler';\r\nimport {\r\n  loadVideoHandler,\r\n  loadVideoQueueHandler,\r\n} from './socket/handlers/video.handler';\r\n\r\nimport { ExtendedSocket } from './lib/types';\r\n\r\nimport app from './app';\r\nimport { addVideoToQueue } from './services/video.service';\r\n\r\nconst host = process.env.HOST ?? 'localhost';\r\nconst port = process.env.PORT ? Number(process.env.PORT) : 3000;\r\n\r\n/**\r\n * Creates an HTTP server using the Express app.\r\n *\r\n * This server will handle incoming HTTP requests and pass them to the Express\r\n * application (`app`) for routing and processing.\r\n */\r\nconst server = http.createServer(app);\r\n\r\n/**\r\n * Initializes a new instance of Socket.io server.\r\n *\r\n * This sets up the Socket.io server to listen on the provided HTTP server\r\n * (`server`) and configures the CORS (Cross-Origin Resource Sharing) settings\r\n * to allow connections from `process.env.CLIENT_ORIGIN` with credentials (cookies, etc.).\r\n */\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: process.env.CLIENT_ORIGIN,\r\n    credentials: true,\r\n  },\r\n});\r\n\r\n/**\r\n * Adds security-related HTTP headers to the application using helmet.\r\n *\r\n * This middleware helps protect the application from common web vulnerabilities\r\n * by setting various HTTP headers, such as those for content security,\r\n * cross-site scripting (XSS) protection, and more...\r\n *\r\n * Purpose:\r\n * - Enhances the security of the application by setting various HTTP headers.\r\n */\r\nio.engine.use(helmet());\r\n\r\n/**\r\n * Assigning session middleware to socket.io engine\r\n *\r\n * Purpose:\r\n * - This middleware ensures that session data is available for each incoming socket connection.\r\n */\r\nio.engine.use(sessionMiddleware);\r\n\r\n/**\r\n * Purpose:\r\n * - This middleware ensures that the user is authenticated before establishing a socket connection.\r\n */\r\nio.use(authorizeUser);\r\n\r\n/**\r\n * Purpose:\r\n * - This middleware populates the socket with the authenticated user data, making it available\r\n * for further socket operations.\r\n */\r\nio.use(attachUserToSocket);\r\n\r\n/**\r\n * Handles new socket connections.\r\n *\r\n * Triggered when a client establishes a socket connection. This function sets up\r\n * event listeners for the connected socket and provides confirmation of the\r\n * successful connection in the console.\r\n *\r\n * @param socket - The connected socket instance.\r\n */\r\nio.on('connect', (socket: ExtendedSocket) => {\r\n  console.log(`[socket] ${socket.user.username} has connected`);\r\n\r\n  io.emit('user:connected', {\r\n    message: `${socket.user.username} has connected`,\r\n  });\r\n\r\n  socket.on('room:join', async ({ roomId }: { roomId: string }) => {\r\n    const isJoined = await joinHandler(socket, roomId);\r\n\r\n    if (isJoined) io.emit('room:joined', { name: socket.user.username });\r\n\r\n    // Send Member list on join\r\n    const memberList = await membersList(socket);\r\n    io.to(roomId).emit('room:members_list', memberList);\r\n\r\n    // Load initial video on join\r\n    const video = await loadVideoHandler(socket);\r\n    if (video) socket.emit('video:load', video);\r\n\r\n    const videoQueue = await loadVideoQueueHandler(\r\n      socket.request.session.roomId\r\n    );\r\n    if (videoQueue) socket.emit('video_queue:update', videoQueue);\r\n  });\r\n\r\n  /**\r\n   * Video State Changes\r\n   */\r\n  socket.on('video:play', () => {\r\n    io.to(socket.request.session.roomId).emit(\r\n      'video:play',\r\n      socket.user.username\r\n    );\r\n  });\r\n  socket.on('video:pause', () => {\r\n    io.to(socket.request.session.roomId).emit(\r\n      'video:pause',\r\n      socket.user.username\r\n    );\r\n  });\r\n  socket.on('video:seek', (seekTo: number) => {\r\n    io.to(socket.request.session.roomId).emit('video:seek', seekTo);\r\n  });\r\n\r\n  socket.on('video:load', (video) => {\r\n    io.to(socket.request.session.roomId).emit('video:load', video);\r\n  });\r\n\r\n  /**\r\n   * Video Queue\r\n   */\r\n  socket.on('video_queue:add', async (videoId: string) => {\r\n    const videoQueue = await addVideoToQueue(\r\n      socket.request.session.roomId,\r\n      videoId\r\n    );\r\n\r\n    io.to(socket.request.session.roomId).emit('video_queue:update', videoQueue);\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    io.emit('user:disconnected', {\r\n      message: `${socket.user.username} has disconnected`,\r\n    });\r\n  });\r\n});\r\n\r\nserver.listen(port, () => {\r\n  console.log(`[ ready ] http://${host}:${port}`);\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,kBAAiB;AACjB,oBAAuB;AACvB,oBAAmB;AACnB,oBAAmB;AAGnB,kBAA8B;AAC9B,IAAAA,iBAAmC;AACnC,gCAAkC;AAElC,kBAAyC;AACzC,mBAGO;AAIP,iBAAgB;AAChB,IAAAC,gBAAgC;AAfhC,cAAAC,QAAO,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAiBvC,MAAM,OAAO,QAAQ,IAAI,QAAQ;AACjC,MAAM,OAAO,QAAQ,IAAI,OAAO,OAAO,QAAQ,IAAI,IAAI,IAAI;AAQ3D,MAAM,SAAS,YAAAC,QAAK,aAAa,WAAAC,OAAG;AASpC,MAAM,KAAK,IAAI,qBAAO,QAAQ;AAAA,EAC5B,MAAM;AAAA,IACJ,QAAQ,QAAQ,IAAI;AAAA,IACpB,aAAa;AAAA,EACf;AACF,CAAC;AAYD,GAAG,OAAO,QAAI,cAAAC,SAAO,CAAC;AAQtB,GAAG,OAAO,IAAI,2CAAiB;AAM/B,GAAG,IAAI,yBAAa;AAOpB,GAAG,IAAI,iCAAkB;AAWzB,GAAG,GAAG,WAAW,CAAC,WAA2B;AAC3C,UAAQ,IAAI,YAAY,OAAO,KAAK,QAAQ,gBAAgB;AAE5D,KAAG,KAAK,kBAAkB;AAAA,IACxB,SAAS,GAAG,OAAO,KAAK,QAAQ;AAAA,EAClC,CAAC;AAED,SAAO,GAAG,aAAa,OAAO,EAAE,OAAO,MAA0B;AAC/D,UAAM,WAAW,UAAM,yBAAY,QAAQ,MAAM;AAEjD,QAAI;AAAU,SAAG,KAAK,eAAe,EAAE,MAAM,OAAO,KAAK,SAAS,CAAC;AAGnE,UAAM,aAAa,UAAM,yBAAY,MAAM;AAC3C,OAAG,GAAG,MAAM,EAAE,KAAK,qBAAqB,UAAU;AAGlD,UAAM,QAAQ,UAAM,+BAAiB,MAAM;AAC3C,QAAI;AAAO,aAAO,KAAK,cAAc,KAAK;AAE1C,UAAM,aAAa,UAAM;AAAA,MACvB,OAAO,QAAQ,QAAQ;AAAA,IACzB;AACA,QAAI;AAAY,aAAO,KAAK,sBAAsB,UAAU;AAAA,EAC9D,CAAC;AAKD,SAAO,GAAG,cAAc,MAAM;AAC5B,OAAG,GAAG,OAAO,QAAQ,QAAQ,MAAM,EAAE;AAAA,MACnC;AAAA,MACA,OAAO,KAAK;AAAA,IACd;AAAA,EACF,CAAC;AACD,SAAO,GAAG,eAAe,MAAM;AAC7B,OAAG,GAAG,OAAO,QAAQ,QAAQ,MAAM,EAAE;AAAA,MACnC;AAAA,MACA,OAAO,KAAK;AAAA,IACd;AAAA,EACF,CAAC;AACD,SAAO,GAAG,cAAc,CAAC,WAAmB;AAC1C,OAAG,GAAG,OAAO,QAAQ,QAAQ,MAAM,EAAE,KAAK,cAAc,MAAM;AAAA,EAChE,CAAC;AAED,SAAO,GAAG,cAAc,CAAC,UAAU;AACjC,OAAG,GAAG,OAAO,QAAQ,QAAQ,MAAM,EAAE,KAAK,cAAc,KAAK;AAAA,EAC/D,CAAC;AAKD,SAAO,GAAG,mBAAmB,OAAO,YAAoB;AACtD,UAAM,aAAa,UAAM;AAAA,MACvB,OAAO,QAAQ,QAAQ;AAAA,MACvB;AAAA,IACF;AAEA,OAAG,GAAG,OAAO,QAAQ,QAAQ,MAAM,EAAE,KAAK,sBAAsB,UAAU;AAAA,EAC5E,CAAC;AAED,SAAO,GAAG,cAAc,MAAM;AAC5B,OAAG,KAAK,qBAAqB;AAAA,MAC3B,SAAS,GAAG,OAAO,KAAK,QAAQ;AAAA,IAClC,CAAC;AAAA,EACH,CAAC;AACH,CAAC;AAED,OAAO,OAAO,MAAM,MAAM;AACxB,UAAQ,IAAI,oBAAoB,IAAI,IAAI,IAAI,EAAE;AAChD,CAAC;",
  "names": ["import_socket", "import_video", "dotenv", "http", "app", "helmet"]
}
