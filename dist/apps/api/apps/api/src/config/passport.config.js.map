{
  "version": 3,
  "sources": ["../../../../../../../apps/api/src/config/passport.config.ts"],
  "sourcesContent": ["import passport, { DoneCallback, Profile } from 'passport';\r\nimport GoogleStratergy from 'passport-google-oauth20';\r\n\r\nimport Users from '../models/user.model';\r\n\r\n/**\r\n * Serializes the user ID into the session.\r\n *\r\n * This method takes the user's ID and stores it in the session to maintain\r\n * a logged-in state across requests.\r\n *\r\n * @param userId - The ID of the authenticated user.\r\n * @param done - The callback to signal the completion of serialization.\r\n */\r\npassport.serializeUser((userId: string, done: DoneCallback) => {\r\n  done(null, userId);\r\n});\r\n\r\n/**\r\n * Deserializes the user ID from the session.\r\n *\r\n * This method retrieves the user ID from the session and attaches it to\r\n * `req.user` for use in the application.\r\n *\r\n * @param userId - The ID of the user retrieved from the session.\r\n * @param done - The callback to signal the completion of deserialization.\r\n */\r\npassport.deserializeUser((userId: string, done: DoneCallback) => {\r\n  done(null, userId);\r\n});\r\n\r\n/**\r\n * Configures Passport to use Google OAuth 2.0 strategy.\r\n *\r\n * This middleware handles the OAuth 2.0 authentication flow with Google. It includes,\r\n * - Sending the user to Google's OAuth 2.0 authentication page.\r\n * - Handling the callback after authentication with Google's servers.\r\n * - Finding or creating a user in the database based on their Google profile.\r\n */\r\npassport.use(\r\n  new GoogleStratergy(\r\n    {\r\n      // Google OAuth 2.0 options\r\n      clientID: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n      callbackURL: '/auth/google/cb',\r\n    },\r\n    /**\r\n     *\r\n     * It either finds the user in the database by their Google ID (or) creates a\r\n     * new user if none exists.\r\n     *\r\n     * @param accessToken - The access token provided by Google.\r\n     * @param refreshToken - The refresh token provided by Google (unused here).\r\n     * @param profile - The authenticated user's profile information from Google.\r\n     * @param done - The callback to signal the completion of authentication.\r\n     */\r\n    async (\r\n      accessToken: string,\r\n      refreshToken: string,\r\n      profile: Profile,\r\n      done: DoneCallback\r\n    ) => {\r\n      // Check if a user with the given Google ID already exists in the database\r\n      const user = await Users.findOne({ googleId: profile.id });\r\n\r\n      // If user exists, complete authentication by passing the user ID\r\n      if (user) {\r\n        done(null, user._id.toString());\r\n        return;\r\n      }\r\n\r\n      // If user does not exist, create a new user in the database\r\n      const newUser = await new Users({\r\n        username: profile.displayName,\r\n        googleId: profile.id,\r\n        profileImg: profile.photos[0].value,\r\n      }).save();\r\n\r\n      const serializeUserPayload = newUser._id.toString();\r\n\r\n      done(null, serializeUserPayload);\r\n    }\r\n  )\r\n);\r\n\r\nexport default passport;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgD;AAChD,qCAA4B;AAE5B,kBAAkB;AAWlB,gBAAAA,QAAS,cAAc,CAAC,QAAgB,SAAuB;AAC7D,OAAK,MAAM,MAAM;AACnB,CAAC;AAWD,gBAAAA,QAAS,gBAAgB,CAAC,QAAgB,SAAuB;AAC/D,OAAK,MAAM,MAAM;AACnB,CAAC;AAUD,gBAAAA,QAAS;AAAA,EACP,IAAI,+BAAAC;AAAA,IACF;AAAA;AAAA,MAEE,UAAU,QAAQ,IAAI;AAAA,MACtB,cAAc,QAAQ,IAAI;AAAA,MAC1B,aAAa;AAAA,IACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,OACE,aACA,cACA,SACA,SACG;AAEH,YAAM,OAAO,MAAM,YAAAC,QAAM,QAAQ,EAAE,UAAU,QAAQ,GAAG,CAAC;AAGzD,UAAI,MAAM;AACR,aAAK,MAAM,KAAK,IAAI,SAAS,CAAC;AAC9B;AAAA,MACF;AAGA,YAAM,UAAU,MAAM,IAAI,YAAAA,QAAM;AAAA,QAC9B,UAAU,QAAQ;AAAA,QAClB,UAAU,QAAQ;AAAA,QAClB,YAAY,QAAQ,OAAO,CAAC,EAAE;AAAA,MAChC,CAAC,EAAE,KAAK;AAER,YAAM,uBAAuB,QAAQ,IAAI,SAAS;AAElD,WAAK,MAAM,oBAAoB;AAAA,IACjC;AAAA,EACF;AACF;AAEA,IAAO,0BAAQ,gBAAAF;",
  "names": ["passport", "GoogleStratergy", "Users"]
}
