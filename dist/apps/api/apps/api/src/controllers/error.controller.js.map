{
  "version": 3,
  "sources": ["../../../../../../../apps/api/src/controllers/error.controller.ts"],
  "sourcesContent": ["import { Response, Request, NextFunction } from 'express';\r\nimport { errorResponse } from '../lib/utils/response.utils';\r\n\r\n/**\r\n * Error handling middleware.\r\n * Captures and processes errors occurring in the application, sending a formatted response to the client.\r\n *\r\n * @param err - The error object containing details about the error.\r\n * @param _req - The HTTP request object (not used here but required by the middleware signature).\r\n * @param res - The HTTP response object, used to send the error response to the client.\r\n * @param _next - The next middleware function (not used here but required by the middleware signature).\r\n *\r\n * Purpose:\r\n * - Captures errors that occur during request processing and sends a structured error response to the client.\r\n */\r\nexport function globalErrorHandler(\r\n  err: any,\r\n  _req: Request,\r\n  res: Response,\r\n  _next: NextFunction\r\n) {\r\n  // Ensure the error has a statusCode (default to 500 for server errors)\r\n  err.statusCode = err.statusCode || 500;\r\n\r\n  // Set a status string ('error' by default)\r\n  err.status = err.status || 'error';\r\n\r\n  // Respond to the client with a structured JSON error response\r\n  res\r\n    .status(err.statusCode) // Set the HTTP status code\r\n    .json(\r\n      errorResponse(\r\n        err.status, // Error status (e.g., 'error', 'fail')\r\n        err.message, // Error message providing details\r\n        err.statusCode // HTTP status code for the error\r\n      )\r\n    );\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAA8B;AAcvB,SAAS,mBACd,KACA,MACA,KACA,OACA;AAEA,MAAI,aAAa,IAAI,cAAc;AAGnC,MAAI,SAAS,IAAI,UAAU;AAG3B,MACG,OAAO,IAAI,UAAU,EACrB;AAAA,QACC;AAAA,MACE,IAAI;AAAA;AAAA,MACJ,IAAI;AAAA;AAAA,MACJ,IAAI;AAAA;AAAA,IACN;AAAA,EACF;AACJ;",
  "names": []
}
