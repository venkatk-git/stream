{
  "version": 3,
  "sources": ["../../../../../../../apps/api/src/controllers/rooms.controller.ts"],
  "sourcesContent": ["import {\r\n  connectMember,\r\n  createRoom,\r\n  isValidRoom,\r\n  joinMember,\r\n} from '../services/room.service';\r\n\r\nimport { catchAsync } from '../lib/utils/catchAsync';\r\nimport { errorResponse, successResponse } from '../lib/utils/response.utils';\r\n\r\nimport { ExtendedRequest } from '../lib/types';\r\nimport { Response, NextFunction } from 'express';\r\n\r\n/**\r\n * @route GET /r\r\n *\r\n * The function performs the following actions:\r\n * - Retrieves the authenticated user's ID from the request.\r\n * - Calls the service function to create a new room using the user's ID.\r\n * - Returns the generated room ID in a JSON response with a 201 status code.\r\n * - Catches any errors during the process and forwards them to the global error handler.\r\n *\r\n * @param req - The request object containing the authenticated user's information.\r\n * @param res - The response object used to send the status and room ID back to the client.\r\n * @param next - The next function to pass control to the error handling middleware in case of errors.\r\n * @access Private (requires authentication)\r\n */\r\nexport const createNewRoom = catchAsync(\r\n  async (req: ExtendedRequest, res: Response, next: NextFunction) => {\r\n    // Call the service function to create a room using the authenticated user's ID\r\n    const roomId = await createRoom(req.user.id);\r\n\r\n    // Send a successful response with the generated roomId\r\n    res.status(201).json(successResponse({ roomId }));\r\n  }\r\n);\r\n\r\n/**\r\n * !!IMPORTANT!! This function is not used in the application and is provided as a reference.\r\n *\r\n *  The function performs the following actions:\r\n * - Retrieves the room ID from the URL parameters.\r\n * - Validates if the room ID exists and is valid by calling the service function.\r\n * - If the room ID is invalid, returns a 400 error response with a relevant message.\r\n * - Attempts to add the authenticated user as a member of the room.\r\n * - Propagates the request to the service to attempt adding the authenticated user as a member of the room.\r\n * - If the user successfully joins the room, the service returns a success status, and a 200 response is sent back to the client.\r\n *\r\n * @param req - The request object containing the room ID in the URL parameters and authenticated user information.\r\n * @param res - The response object used to send the status and messages back to the client.\r\n * @param next - The next function to pass control to the next middleware in case of an error.\r\n * @access Private (requires authentication)\r\n */\r\nexport const joinRoom = catchAsync(\r\n  async (req: ExtendedRequest, res: Response, next: NextFunction) => {\r\n    const roomId = req.params.id;\r\n\r\n    // Check if the room ID is valid\r\n    const isValidRoom = await isValidRoom(roomId);\r\n    if (!isValidRoom) {\r\n      return res\r\n        .status(400)\r\n        .json(\r\n          errorResponse(\r\n            '',\r\n            'Invalid room ID. Please check the room ID and try again.',\r\n            400\r\n          )\r\n        );\r\n    }\r\n\r\n    // Attempt to add the user as a member of the room\r\n    const isMemberJoined = joinMember(roomId, req.user.id);\r\n    if (!isMemberJoined) {\r\n      return res\r\n        .status(400)\r\n        .json(\r\n          errorResponse(\r\n            '',\r\n            'Failed to join the room. Please try again later.',\r\n            400\r\n          )\r\n        );\r\n    }\r\n\r\n    // If successful, return a success response\r\n    res.status(200).json(successResponse(null));\r\n  }\r\n);\r\n\r\n/**\r\n * !!IMPORTANT!! This function is not used in the application and is provided as a reference.\r\n *\r\n * @desc Allows an authenticated user to connect to an existing room by its room ID.\r\n * The function performs the following actions:\r\n * - Retrieves the room ID from the URL parameters and the authenticated user's ID from the request.\r\n * - Calls the service function to check if the user can connect to the room.\r\n * - If the connection is not possible (e.g., invalid room ID), returns a 400 error response with a relevant message.\r\n * - If the user successfully connects to the room, returns a 201 status code indicating successful connection.\r\n *\r\n * @param req - The request object containing the room ID in the URL parameters and the authenticated user\u2019s ID.\r\n * @param res - The response object used to send the status and messages back to the client.\r\n * @param next - The next function to pass control to the next middleware in case of an error.\r\n * @access Private (requires authentication)\r\n */\r\nexport const connectToRoom = catchAsync(\r\n  async (req: ExtendedRequest, res: Response, next: NextFunction) => {\r\n    const roomId = req.params.id;\r\n    const userId = req.user.id;\r\n\r\n    const canConnect = await connectMember(roomId, userId);\r\n    if (!canConnect) {\r\n      return res\r\n        .status(400)\r\n        .json(\r\n          errorResponse(\r\n            '',\r\n            'Invalid room ID. Please check the room ID and try again.',\r\n            400\r\n          )\r\n        );\r\n    }\r\n\r\n    res.status(201).json(successResponse(null));\r\n    console.info(\r\n      `User connected to room: { roomId: ${roomId}, userId: ${userId} }`\r\n    );\r\n  }\r\n);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKO;AAEP,wBAA2B;AAC3B,sBAA+C;AAmBxC,MAAM,oBAAgB;AAAA,EAC3B,OAAO,KAAsB,KAAe,SAAuB;AAEjE,UAAM,SAAS,UAAM,wBAAW,IAAI,KAAK,EAAE;AAG3C,QAAI,OAAO,GAAG,EAAE,SAAK,iCAAgB,EAAE,OAAO,CAAC,CAAC;AAAA,EAClD;AACF;AAkBO,MAAM,eAAW;AAAA,EACtB,OAAO,KAAsB,KAAe,SAAuB;AACjE,UAAM,SAAS,IAAI,OAAO;AAG1B,UAAMA,eAAc,MAAMA,aAAY,MAAM;AAC5C,QAAI,CAACA,cAAa;AAChB,aAAO,IACJ,OAAO,GAAG,EACV;AAAA,YACC;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACJ;AAGA,UAAM,qBAAiB,wBAAW,QAAQ,IAAI,KAAK,EAAE;AACrD,QAAI,CAAC,gBAAgB;AACnB,aAAO,IACJ,OAAO,GAAG,EACV;AAAA,YACC;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACJ;AAGA,QAAI,OAAO,GAAG,EAAE,SAAK,iCAAgB,IAAI,CAAC;AAAA,EAC5C;AACF;AAiBO,MAAM,oBAAgB;AAAA,EAC3B,OAAO,KAAsB,KAAe,SAAuB;AACjE,UAAM,SAAS,IAAI,OAAO;AAC1B,UAAM,SAAS,IAAI,KAAK;AAExB,UAAM,aAAa,UAAM,2BAAc,QAAQ,MAAM;AACrD,QAAI,CAAC,YAAY;AACf,aAAO,IACJ,OAAO,GAAG,EACV;AAAA,YACC;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACJ;AAEA,QAAI,OAAO,GAAG,EAAE,SAAK,iCAAgB,IAAI,CAAC;AAC1C,YAAQ;AAAA,MACN,qCAAqC,MAAM,aAAa,MAAM;AAAA,IAChE;AAAA,EACF;AACF;",
  "names": ["isValidRoom"]
}
