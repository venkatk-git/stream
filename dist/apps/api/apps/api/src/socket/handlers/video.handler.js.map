{
  "version": 3,
  "sources": ["../../../../../../../../apps/api/src/socket/handlers/video.handler.ts"],
  "sourcesContent": ["import { ExtendedSocket } from '../../lib/types';\r\nimport { getPlayingVideoService, getVideoService } from '../../services/room.service';\r\nimport { getVideoQueueService } from '../../services/video.service';\r\n\r\ntype VideoEvents = 'video:play' | 'video:pause' | 'video:seek';\r\n\r\n/**\r\n * This function will handle events for the video player.\r\n *\r\n * @param socket\r\n * @param event\r\n * @param payload\r\n */\r\nexport function videoEventHandler(\r\n  socket: ExtendedSocket,\r\n  event: VideoEvents,\r\n  payload: { videoId: string }\r\n) {\r\n  // Check if the user is in a room\r\n  if (!socket.request.session.roomId) {\r\n    socket.emit('socket:error', 'You are not in a room');\r\n    socket.disconnect(true);\r\n  }\r\n\r\n  // Emit the play event to all users in the room\r\n  socket.to(socket.request.session.roomId).emit(event, payload);\r\n}\r\n\r\nexport async function loadVideoHandler(roomId: string) {\r\n  const video = await getPlayingVideoService(roomId);\r\n  return video;\r\n}\r\n\r\n/**\r\n * Video Queue\r\n */\r\nexport async function loadVideoQueueHandler(roomId: string) {\r\n  if (!roomId) {\r\n    return;\r\n  }\r\n\r\n  const videoQueue = await getVideoQueueService(roomId);\r\n\r\n  return videoQueue;\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAwD;AACxD,mBAAqC;AAW9B,SAAS,kBACd,QACA,OACA,SACA;AAEA,MAAI,CAAC,OAAO,QAAQ,QAAQ,QAAQ;AAClC,WAAO,KAAK,gBAAgB,uBAAuB;AACnD,WAAO,WAAW,IAAI;AAAA,EACxB;AAGA,SAAO,GAAG,OAAO,QAAQ,QAAQ,MAAM,EAAE,KAAK,OAAO,OAAO;AAC9D;AAEA,eAAsB,iBAAiB,QAAgB;AACrD,QAAM,QAAQ,UAAM,oCAAuB,MAAM;AACjD,SAAO;AACT;AAKA,eAAsB,sBAAsB,QAAgB;AAC1D,MAAI,CAAC,QAAQ;AACX;AAAA,EACF;AAEA,QAAM,aAAa,UAAM,mCAAqB,MAAM;AAEpD,SAAO;AACT;",
  "names": []
}
