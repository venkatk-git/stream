{
  "version": 3,
  "sources": ["../../../../../../../apps/api/src/services/video.service.ts"],
  "sourcesContent": ["import axios from 'axios';\r\n\r\nimport Room from '../models/room.model';\r\n\r\nimport { isValidRoomService } from './room.service';\r\n\r\n/**\r\n * Retrieves the video queue for a specific room.\r\n *\r\n * @param roomId - The unique identifier of the room.\r\n * @returns The video queue of the room if it exists, otherwise `null`.\r\n */\r\nexport async function getVideoQueueService(roomId: string) {\r\n  try {\r\n    // Validate the input parameter\r\n    if (!roomId) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Check if the room exists by validating its ID\r\n    const isRoomValid = await isValidRoomService(roomId);\r\n    if (!isRoomValid) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Retrieve the video queue for the room from the database\r\n    const video_queue = await Room.findOne({ roomId }).select('videoQueue');\r\n\r\n    // Return the video queue\r\n    return video_queue.videoQueue;\r\n  } catch (error) {\r\n    // Log and handle any errors that occur during execution\r\n    console.error(error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Adds a video to the video queue of a specific room.\r\n *\r\n * @param roomId - The unique identifier of the room.\r\n * @param videoId - The unique identifier of the YouTube video to be added.\r\n * @returns The updated video queue if successful, otherwise `null`.\r\n */\r\nexport async function addVideoToQueueService(roomId: string, videoId: string) {\r\n  try {\r\n    // Validate the roomId parameter\r\n    if (!roomId) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Check if the room exists by validating its ID\r\n    const isRoomValid = await isValidRoomService(roomId);\r\n    if (!isRoomValid) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Retrieve the room from the database\r\n    const room = await Room.findOne({ roomId });\r\n\r\n    // Fetch video details from the YouTube API using the provided videoId\r\n    const ytResponse = await axios.get(\r\n      `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${process.env.GOOGLE_API_KEY}`\r\n    );\r\n\r\n    // Check if the response from the YouTube API is valid and contains video details\r\n    if (ytResponse.statusText != 'OK' || ytResponse.data.items.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    // Extract the video title from the YouTube API response\r\n    const title = ytResponse.data.items[0].snippet.title;\r\n\r\n    // Add the video details to the room's video queue\r\n    const videoQueue = room?.videoQueue;\r\n    videoQueue.push({\r\n      videoId,\r\n      title,\r\n    });\r\n\r\n    // Save the updated room information in the database\r\n    await room.save();\r\n\r\n    // Return the updated video queue\r\n    return videoQueue;\r\n  } catch (error) {\r\n    // Log and handle any errors that occur during execution\r\n    console.error(error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function updatePlayingVideoService(\r\n  roomId: string,\r\n  videoId: string\r\n) {\r\n  try {\r\n    // Validate the roomId parameter\r\n    if (!roomId) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Check if the room exists by validating its ID\r\n    const isRoomValid = await isValidRoomService(roomId);\r\n    if (!isRoomValid) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Retrieve the room from the database\r\n    const room = await Room.findOne({ roomId });\r\n\r\n    // Add the video details to the room's video queue\r\n    const videoQueue = room?.videoQueue;\r\n\r\n    /**\r\n     * Updating playing video\r\n     */\r\n    room.playingVideo = {\r\n      videoId,\r\n      timeStamp: 0,\r\n    };\r\n\r\n    // Save the updated room information in the database\r\n    await room.save();\r\n\r\n    // Return the updated video queue\r\n    return videoQueue;\r\n  } catch (error) {\r\n    // Log and handle any errors that occur during execution\r\n    console.error(error);\r\n    return null;\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAElB,kBAAiB;AAEjB,IAAAA,eAAmC;AAQnC,eAAsB,qBAAqB,QAAgB;AACzD,MAAI;AAEF,QAAI,CAAC,QAAQ;AACX,cAAQ,MAAM,6BAA6B,MAAM,IAAI;AACrD,aAAO;AAAA,IACT;AAGA,UAAM,cAAc,UAAM,iCAAmB,MAAM;AACnD,QAAI,CAAC,aAAa;AAChB,cAAQ,MAAM,6BAA6B,MAAM,IAAI;AACrD,aAAO;AAAA,IACT;AAGA,UAAM,cAAc,MAAM,YAAAC,QAAK,QAAQ,EAAE,OAAO,CAAC,EAAE,OAAO,YAAY;AAGtE,WAAO,YAAY;AAAA,EACrB,SAAS,OAAO;AAEd,YAAQ,MAAM,KAAK;AACnB,WAAO;AAAA,EACT;AACF;AASA,eAAsB,uBAAuB,QAAgB,SAAiB;AAC5E,MAAI;AAEF,QAAI,CAAC,QAAQ;AACX,cAAQ,MAAM,6BAA6B,MAAM,IAAI;AACrD,aAAO;AAAA,IACT;AAGA,UAAM,cAAc,UAAM,iCAAmB,MAAM;AACnD,QAAI,CAAC,aAAa;AAChB,cAAQ,MAAM,6BAA6B,MAAM,IAAI;AACrD,aAAO;AAAA,IACT;AAGA,UAAM,OAAO,MAAM,YAAAA,QAAK,QAAQ,EAAE,OAAO,CAAC;AAG1C,UAAM,aAAa,MAAM,aAAAC,QAAM;AAAA,MAC7B,gEAAgE,OAAO,QAAQ,QAAQ,IAAI,cAAc;AAAA,IAC3G;AAGA,QAAI,WAAW,cAAc,QAAQ,WAAW,KAAK,MAAM,UAAU,GAAG;AACtE,aAAO;AAAA,IACT;AAGA,UAAM,QAAQ,WAAW,KAAK,MAAM,CAAC,EAAE,QAAQ;AAG/C,UAAM,aAAa,MAAM;AACzB,eAAW,KAAK;AAAA,MACd;AAAA,MACA;AAAA,IACF,CAAC;AAGD,UAAM,KAAK,KAAK;AAGhB,WAAO;AAAA,EACT,SAAS,OAAO;AAEd,YAAQ,MAAM,KAAK;AACnB,WAAO;AAAA,EACT;AACF;AAEA,eAAsB,0BACpB,QACA,SACA;AACA,MAAI;AAEF,QAAI,CAAC,QAAQ;AACX,cAAQ,MAAM,6BAA6B,MAAM,IAAI;AACrD,aAAO;AAAA,IACT;AAGA,UAAM,cAAc,UAAM,iCAAmB,MAAM;AACnD,QAAI,CAAC,aAAa;AAChB,cAAQ,MAAM,6BAA6B,MAAM,IAAI;AACrD,aAAO;AAAA,IACT;AAGA,UAAM,OAAO,MAAM,YAAAD,QAAK,QAAQ,EAAE,OAAO,CAAC;AAG1C,UAAM,aAAa,MAAM;AAKzB,SAAK,eAAe;AAAA,MAClB;AAAA,MACA,WAAW;AAAA,IACb;AAGA,UAAM,KAAK,KAAK;AAGhB,WAAO;AAAA,EACT,SAAS,OAAO;AAEd,YAAQ,MAAM,KAAK;AACnB,WAAO;AAAA,EACT;AACF;",
  "names": ["import_room", "Room", "axios"]
}
