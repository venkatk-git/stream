{
  "version": 3,
  "sources": ["../../../../../../../apps/api/src/services/room.service.ts"],
  "sourcesContent": ["import { str10_36 } from 'hyperdyperid/lib/str10_36';\r\nimport mongoose, { Types } from 'mongoose';\r\n\r\nimport Room from '../models/room.model';\r\nimport User from '../models/user.model';\r\nimport Members from '../models/members.model';\r\n\r\n/**\r\n * Creates a new room with the specified owner.\r\n *\r\n * This function validates the `ownerId`, checks if the owner exists in the database,\r\n * generates a unique room ID, and creates a new room entry in the database.\r\n * If any step fails, it logs the error and returns `null`.\r\n *\r\n * @param ownerId - The ID of the user who will own the room.\r\n * @returns The unique room ID if the room is created successfully, or `null` if an error occurs.\r\n */\r\nexport async function createRoom(ownerId: string): Promise<string | null> {\r\n  // Validate ownerId\r\n  if (!mongoose.Types.ObjectId.isValid(ownerId)) {\r\n    console.error('Invalid ownerId');\r\n    return null;\r\n  }\r\n\r\n  // Check if owner exists\r\n  const owner = await User.findById(ownerId);\r\n  if (!owner) {\r\n    console.error(`Owner not found: { ownerId: ${ownerId} }`);\r\n    return null;\r\n  }\r\n\r\n  const roomId = str10_36();\r\n\r\n  const newRoom = new Room({\r\n    roomId,\r\n    ownerId,\r\n    members: [ownerId],\r\n  });\r\n\r\n  const newMembersList = new Members({\r\n    roomId,\r\n    members: {\r\n      name: owner.username,\r\n      memberId: owner.id,\r\n      profileImg: owner.profileImg,\r\n    },\r\n  });\r\n\r\n  await newRoom.save();\r\n  await newMembersList.save();\r\n\r\n  console.info(`Room created: { roomId: ${roomId}, ownerId: ${ownerId} }`);\r\n  return roomId;\r\n}\r\n\r\n/**\r\n * Validates if a room exists in the database.\r\n *\r\n * This function checks if a room with the given `roomId` exists by querying the database.\r\n * It fetches only the `roomId` field to optimize the query.\r\n *\r\n * @param roomId - The unique identifier of the room to validate.\r\n * @returns {Promise<boolean>} - Returns `true` if the room exists, otherwise `false`.\r\n *\r\n * Usage:\r\n * - Use this function to ensure that the requested room exists before performing operations on it.\r\n *\r\n * Note:\r\n * - If an error occurs during the validation process (e.g., database connectivity issues),\r\n *   it logs the error and returns `false`.\r\n */\r\nexport async function isValidRoom(roomId: string): Promise<boolean> {\r\n  // Check if room exists\r\n  const room = await Room.exists({ roomId });\r\n\r\n  console.info(`Room validation: { roomId: ${roomId}, isValid: ${room} }`);\r\n  return room !== null;\r\n}\r\n\r\n/**\r\n * Adds a user to a room if the user is not already a member.\r\n *\r\n * This function checks if the user and the room exist, and if the user is not already a member of the room,\r\n * it adds the user to the room's members list. It also validates the `userId` and `roomId`, ensuring they are valid\r\n * before attempting to update the room.\r\n *\r\n * @param roomId - The unique identifier of the room to join.\r\n * @param userId - The unique identifier of the user trying to join the room.\r\n * @returns {Promise<boolean>} - Returns `true` if the user joined the room successfully, otherwise `false`.\r\n *\r\n * Usage:\r\n * - Use this function to allow users to join a room while ensuring they are not added more than once.\r\n */\r\nexport async function joinMember(\r\n  roomId: string,\r\n  userId: string\r\n): Promise<boolean> {\r\n  // Validate userId\r\n  if (!mongoose.Types.ObjectId.isValid(userId)) {\r\n    console.error('Invalid userId');\r\n    return false;\r\n  }\r\n\r\n  // Check if user exists\r\n  const user = await User.findById(userId);\r\n  if (!user) {\r\n    console.error(`User not found: { userId: ${userId} }`);\r\n    return false;\r\n  }\r\n\r\n  // Check if room exists\r\n  const isRoomValid = await isValidRoom(roomId);\r\n  if (!isRoomValid) {\r\n    console.error(`Room not found: { roomId: ${roomId} }`);\r\n    return false;\r\n  }\r\n\r\n  // Get the room and its members\r\n  const room = await Room.findOne({ roomId }).select('members roomType');\r\n  if (!room) {\r\n    console.error(`Room not found: { roomId: ${roomId} }`);\r\n    return false;\r\n  }\r\n\r\n  // Prevent joining if the room is private\r\n  if (room.roomType === 'private') {\r\n    console.info(\r\n      `User cannot connect to private room: { roomId: ${roomId}, userId: ${userId} }`\r\n    );\r\n    return false;\r\n  }\r\n\r\n  const userObjectId = new Types.ObjectId(userId);\r\n\r\n  // Add user to the room if not already a member\r\n  if (room.members.includes(userObjectId)) {\r\n    console.info(`User joined room: { roomId: ${roomId}, userId: ${userId} }`);\r\n    return true;\r\n  }\r\n\r\n  // Add the user to the room's members list\r\n  await Room.findOneAndUpdate(\r\n    { roomId },\r\n    { $addToSet: { members: userObjectId } } // Add only if the user is not already in the list\r\n  );\r\n\r\n  const membersList = await Members.findOneAndUpdate(\r\n    { roomId },\r\n    {\r\n      $addToSet: {\r\n        members: {\r\n          name: user.username,\r\n          memberId: user._id,\r\n          profileImg: user.profileImg,\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  if (!membersList) {\r\n    console.error(`Failed to update members list for roomId: ${roomId}`);\r\n    return false;\r\n  }\r\n\r\n  console.info(`User joined room: { roomId: ${roomId}, userId: ${userId} }`);\r\n  return true;\r\n}\r\n\r\n/**\r\n * Connects a user to a room if the user and room exist.\r\n * Validates the user and room, checks if the user is already connected,\r\n * and connects the user if not already a member.\r\n *\r\n * @param roomId - The ID of the room to connect the user to.\r\n * @param userId - The ID of the user to connect to the room.\r\n * @returns {Promise<boolean>} - Returns true if the user is successfully\r\n *                               connected or already connected, false otherwise.\r\n */\r\nexport async function connectMember(\r\n  roomId: string,\r\n  userId: string\r\n): Promise<boolean> {\r\n  // Validate userId\r\n  if (!mongoose.Types.ObjectId.isValid(userId)) {\r\n    console.error('Invalid userId');\r\n    return false;\r\n  }\r\n\r\n  // Convert userId to ObjectId\r\n  const userObjectId = new mongoose.Types.ObjectId(userId);\r\n\r\n  // Check if user exists\r\n  const user = await User.findById(userObjectId);\r\n  if (!user) {\r\n    console.error(`User not found: { userId: ${userId} }`);\r\n    return false;\r\n  }\r\n\r\n  // Check if room exists\r\n  const room = await isValidRoom(roomId);\r\n  if (!room) {\r\n    console.error(`Room not found: { roomId: ${roomId} }`);\r\n    return false;\r\n  }\r\n\r\n  // Check if the user is already a member of the room\r\n  const isUserInRoom = await Room.exists({ roomId, members: userObjectId });\r\n  if (isUserInRoom) {\r\n    console.info(\r\n      `User already connected to room: { roomId: ${roomId}, userId: ${userId} }`\r\n    );\r\n    return true;\r\n  }\r\n\r\n  // If not already connected, delegate to the `joinMemberService` to add the user to the room\r\n  return joinMember(roomId, userId);\r\n}\r\n\r\nexport async function getRoomMembersService(roomId: string) {\r\n  try {\r\n    if (!roomId) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Check if room exists\r\n    const isRoomValid = await isValidRoom(roomId);\r\n    if (!isRoomValid) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    const members_list = await Members.findOne({ roomId }).select('members');\r\n    if (!members_list) {\r\n      console.error(`Member list not found with room id : ${roomId}`);\r\n      return null;\r\n    }\r\n\r\n    return members_list.members;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * !!! TEMPORARY SOLUTION FOR LOADING RECENT PLAYING VIDEO\r\n *\r\n * @param roomId\r\n * @returns\r\n */\r\nexport async function getVideo(roomId: string) {\r\n  try {\r\n    if (!roomId) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Check if room exists\r\n    const isRoomValid = await isValidRoom(roomId);\r\n    if (!isRoomValid) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    const room = await Room.findOne({ roomId });\r\n    const videoQueue = room?.videoQueue;\r\n\r\n    // console.log(videoQueue);\r\n\r\n    if (!videoQueue || videoQueue.length === 0) return null;\r\n\r\n    return videoQueue[0];\r\n  } catch (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param roomId\r\n * @returns\r\n */\r\nexport async function getPlayingVideo(roomId: string) {\r\n  try {\r\n    if (!roomId) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Check if room exists\r\n    const isRoomValid = await isValidRoom(roomId);\r\n    if (!isRoomValid) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    const room = await Room.findOne({ roomId });\r\n\r\n    if (room.videoQueue.length == 0) return null;\r\n\r\n    const video = room.videoQueue.filter(\r\n      (video) => video.videoId === room.playingVideo.videoId\r\n    );\r\n\r\n    return {\r\n      videoId: video[0].videoId,\r\n      timeStamp: room.playingVideo.timeStamp,\r\n      title: video[0].title,\r\n    };\r\n  } catch (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * \r\n * @param roomId\r\n * @returns\r\n */\r\nexport async function handleRoomLock(roomId: string) {\r\n  try {\r\n    if (!roomId) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Check if room exists\r\n    const isRoomValid = await isValidRoom(roomId);\r\n    if (!isRoomValid) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    await Room.findOneAndUpdate(\r\n      { roomId },\r\n      { roomType: 'private' },\r\n      { new: true }\r\n    );\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param roomId\r\n * @param played\r\n * @returns\r\n */\r\nexport async function handleRoomUnlock(roomId: string, played: number) {\r\n  try {\r\n    if (!roomId) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    // Check if room exists\r\n    const isRoomValid = await isValidRoom(roomId);\r\n    if (!isRoomValid) {\r\n      console.error(`Room not found: { roomId: ${roomId} }`);\r\n      return null;\r\n    }\r\n\r\n    const room = await Room.findOne({ roomId });\r\n    room.roomType = 'public';\r\n    room.playingVideo.timeStamp = played;\r\n    await room.save();\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["mongoose", "User", "Room", "Members", "video"]
}
